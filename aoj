# AOJ utility command built on zsh
#
# Usage: aoj [command] [problem id (optional, infered from current directory)]
#
# Commands:
#   help    - show this help
#   init    - create the directory, download README.md and sample data, copy template file
#   check   - check the solution by sample data
#   submit  - submit the solution to AOJ server
#   commit  - commit the solution to Git
#
# Examples:
#   Create directory for problem 0149
#     $ aoj init 0149
#   Check the solution of problem 0132
#     $ pwd
#       AOJ_ROOT/Volume001/0132/
#     $ aoj check
#   Submit the solution of problem 0150
#     $ pwd
#       AOJ_ROOT/Volume001/0150
#     $ aoj submit
#
#
# Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
#
# Note:
#   - This script works on loading by `source` like `source ./aoj`.
#
#   - A user name and a password are read from `.secret` file as shell script.
#
#   - The directory layout assumed by this script is:
#
#     AOJ_ROOT/
#       Volume000/
#         0000/
#           Main.java
#           input1.txt
#           output1.txt
#           ...
#         0001/
#           ...
#         0002/
#           ...
#         ...
#       Volume001/
#         0100/
#          ...
#         0101/
#          ...
#         ...
#       Volume002/
#         ...
#       ...

AOJ_COMMAND="$(realpath -- "$0")"
AOJ_ROOT="$(dirname -- "$AOJ_COMMAND")"

source "$AOJ_ROOT/.secret"

aoj() {
  local cmd id
  cmd="aoj::$1"
  id="${2:-$(basename "$PWD")}"
  [[ $cmd == "aoj::help" || $id =~ '^[0-9]+$' ]] || {
    echo "\e[31mError: cannot infer problem id\e[0m" >&2
    aoj::help; return 1
  }
  type "$cmd" &>/dev/null || {
    echo "\e[31mError: unknown command\e[0m" >&2
    aoj::help; return 1
  }

  "$cmd" "$id"
}

aoj::help() {
  awk '! /^#/ { flag = 1 } ! flag' "$AOJ_COMMAND" | sed 's/^# \?//'
}

aoj::init() {
  local id dir
  id="$(printf "%04d" "$1")"
  dir="$(printf "%s/Volume%03d/%04d/" "$AOJ_ROOT" $[id / 100] $id)"

  echo -n "Create the directory and copy the template file: "

  mkdir -p "$dir" \
    && cd "$dir"  \
    && cp "$AOJ_ROOT/Main.java" "$dir" || return 1

  echo "done"

  aoj::download-readme "$id" || return 1
  aoj::download-sample "$id" || return 1
}

aoj::check() {
  local id dir source sample
  id="$(printf "%04d" "$1")"
  dir="$(printf "%s/Volume%03d/%04d/" "$AOJ_ROOT" $[id / 100] $id)"
  source="$dir/Main.java"

  echo "Check the solution of problem $id: "

  javac "$source" -d "$dir" -Xlint || return 1
  for sample in $dir/input*.txt; do
    echo -n $sample | sed 's/.*\/input\(.*\)\.txt/sample \1: /'
    java -cp "$dir" Main < $sample | diff -u "$(echo $sample | sed 's/input\(.*\)\.txt/output\1.txt/')" - || return 1
    echo ok
  done

  echo "done"
}

aoj::submit() {
  local id source
  id="$(printf "%04d" "$1")"
  source="$(printf "%s/Volume%03d/%04d/Main.java" "$AOJ_ROOT" $[id / 100] $id)"

  echo -n "Submit the solution of problem $id: "

  curl -s "http://judge.u-aizu.ac.jp/onlinejudge/webservice/submit" \
    --data-urlencode userID="$AOJ_USER"                             \
    --data-urlencode password="$AOJ_PASS"                           \
    --data-urlencode problemNO="$id"                                \
    -d language=JAVA                                                \
    -d lessonID=""                                                  \
    --data-urlencode sourceCode="$(cat "$source")" >/dev/null

  echo "done"

  [[ -n $DISPLAY ]] && xdg-open "http://judge.u-aizu.ac.jp/onlinejudge/status.jsp"
}

aoj::commit() {
  local id dir
  id="$(printf "%04d" "$1")"
  dir="$(printf "%s/Volume%03d/%04d/" "$AOJ_ROOT" $[id / 100])"

  git add "$dir"
  git commit -m "Accepted '$id: $(head -n1 "$dir/README.md" | sed 's/^# //')"
}

aoj::download-readme() {
  local id html readme
  id="$(printf "%04d" "$1")"
  readme="$(printf "%s/Volume%03d/%04d/README.md" "$AOJ_ROOT" $[id / 100] $id)"

  echo -n "Download README.md of problem $id: "

  html=$(curl -s "http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=$id&lang=jp" \
    | iconv -fsjis -tutf8                                                               \
    | awk '/<div class="description">/, /<\/div>/') || return 1

  curl -s "http://heckyesmarkdown.com/go/" --data-urlencode html="$html" > $readme || return 1

  grep '\[.*\]:' "$readme" \
    | awk -F': ?' -v dir="$(dirname $readme)" '
      {
        command = sprintf("cd %s && dir=$(dirname %s) && mkdir -p $dir && cd $dir && " \
          "curl -sO http://judge.u-aizu.ac.jp/onlinejudge/%s",
          dir, $2, $2)
        system(command)
        close(command)
      }
    '

  echo "done"
}

aoj::download-sample() {
  local id
  id="$(printf "%04d" "$1")"

  echo -n "Download sample data of problem $id: "

  curl -s "http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=$id" \
    | iconv -fsjis -tutf8                                                \
    | tr -d '\r'                                                         \
    | awk -v AOJ_ROOT="$AOJ_ROOT" -v id="$id" '
      BEGIN {
        count = 0
      }

      />Sample Input.*<\// {
        flag1 = 1
      }

      flag1 && /<pre>/ {
        flag2 = 1
      }
 
      flag2 && /<\/pre>/ {
        flag2 = 0

        filename = sprintf("%s/Volume%03d/%04d/%s%d.txt",
          AOJ_ROOT,
          id / 100,
          id,
          count % 2 == 0 ? "input" : "output",
          (count / 2) + 1)
        printf("%s", data) > filename

        data = ""
        count += 1
      }

      flag2 {
        if (flag2 > 1) {
          data = data $0 "\n"
        }
        flag2 += 1
      }
    ' || return 1

  echo "done"
}

# vim:ft=zsh:
